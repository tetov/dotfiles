set -o allexport

# if nothing matches the glob should expand to null
if [ "$0" = "bash" -o "$0" = "sh" ]; then
  shopt -s nullglob
elif [ "$0" = "zsh" ]; then
  set -o nullglob
fi

for f in "$HOME/.config/environment.d"/*.conf; do
  . "$f"
done

if [ "$0" = "bash" -o "$0" = "sh" ]; then
  shopt -u nullglob
elif [ "$0" = "zsh" ]; then
  set +o nullglob
fi
if command -v emacsclient >/dev/null; then
  VISUAL="emacsclient"
fi

# start emacs daemon if none found
ALTERNATE_EDITOR=""

# For gpg agent forwarding. (Dir gets deleted on log out)
gpgconf --create-socketdir
# if not SSH connection
if [ -z "$SSH_CLIENT" ]; then
  # one way to check if vnc connection, assuming :0 is never used for vnc
  # server..
  # either there's no DISPLAY but if there is it should be :0
  if [ -z "$DISPLAY" -o "$DISPLAY" = ":0" ] ; then
    GPG_TTY=$(tty)
    gpgconf --launch gpg-agent
  fi
fi

agent_ssh_socket="$(gpgconf --list-dirs agent-ssh-socket)"

test -n "$agent_ssh_socket" &&
  SSH_AUTH_SOCK="$agent_ssh_socket"

set +o allexport

#test -n $DISPLAY && setxkbmap se us >/dev/null

alias v=vim
alias e=emacsclient
alias en='emacsclient -n'

# https://superuser.com/a/1644866
_path_prepend() {
  if [ -n "$2" ]; then
    case ":$(eval "echo \$$1"):" in
      *":$2:"*) : ;;
      *) eval "export $1=$2\${$1:+\":\$$1\"}" ;;
    esac
  else
    case ":$PATH:" in
      *":$1:"*) : ;;
      *) export PATH="$1${PATH:+":$PATH"}" ;;
    esac
  fi
}

# https://superuser.com/a/1644866
_path_append() {
  if [ -n "$2" ]; then
    case ":$(eval "echo \$$1"):" in
      *":$2:"*) : ;;
      *) eval "export $1=\${$1:+\"\$$1:\"}$2" ;;
    esac
  else
    case ":$PATH:" in
      *":$1:"*) : ;;
      *) export PATH="${PATH:+"$PATH:"}$1" ;;
    esac
  fi
}

_path_prepend $HOME/.cargo/bin
_path_prepend $HOME/.local/bin
_path_prepend /usr/lib/ccache
_path_prepend $HOME/bin

_path_append "$XDG_CONFIG_HOME/emacs/bin"
_path_append "$HOME/.poetry/bin"

_path_append "$HOME/Applications/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin"

# vim: set ft=sh ts=2

# Local Variables:
# mode: sh
# End:
