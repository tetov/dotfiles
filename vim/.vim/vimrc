set nocompatible " get rid of Vi compatibility mode. SET FIRST!

" Automatic installation vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" vim-plug configuration

call plug#begin('~/.vim/plugged')

if has('python3')
  Plug 'Vimjas/vim-python-pep8-indent'
  Plug 'tmhedberg/simpylfold'              " Folding for Python
endif

" GENERAL
" Plug 'alvan/vim-closetag'                " Closes html and xml tags
Plug 'editorconfig/editorconfig-vim'     " project specific editor settings
Plug 'godlygeek/tabular'                 " Lines up code
Plug 'junegunn/fzf'                  " Quicker searching
Plug 'junegunn/fzf.vim'                  " Quicker searching
" Plug 'ntpeters/vim-better-whitespace'    " Highlights extraneous whitespace
Plug 'Konfekt/fastfold'                  " Apparently folds are slow?
Plug 'kopischke/vim-stay'                " Remembers cursor locations in buffers
Plug 'sheerun/vim-polyglot'              " Lots of more syntax highlighting
Plug 'tmux-plugins/vim-tmux-focus-events' " For shared vim tmux clipboard
Plug 'tpope/vim-commentary'              " Comment and uncomment
Plug 'tpope/vim-repeat'                  " Allows repetition (with .) for plugin commands
Plug 'tpope/vim-sensible'                " Sensible standards
Plug 'tpope/vim-unimpaired'
" Plug 'tpope/vim-endwise'                 " Completes with end in ruby and sh
Plug 'tpope/vim-sleuth'                  " Guess tab width
Plug 'tpope/vim-surround'                " Operate on surrounding characters
Plug 'ludovicchabant/vim-gutentags'      " autogenerate tags
Plug 'dbeniamine/todo.txt-vim'           " Todo-txt
Plug 'qpkorr/vim-renamer'                " Bulk rename in vim
Plug 'samoshkin/vim-mergetool'           " Mergetool
" Plug 'preservim/tagbar'
" Plug 'jiangmiao/auto-pairs'
Plug 'ConradIrwin/vim-bracketed-paste'   " Make vim aware of pastes
" Plug 'tpope/vim-dispatch'
Plug 'ervandew/supertab'


" LINT and FIX
Plug 'dense-analysis/ale'                          " Linter
Plug 'thirtythreeforty/lessspace.vim'    " Removes excess whitespace from line edited

" UI
Plug 'airblade/vim-gitgutter'            " Shows diff line by line
Plug 'itchyny/lightline.vim'             " Statusbar
Plug 'jeffkreeftmeijer/vim-numbertoggle' " Relative numbers when it makes sense
Plug 'mengelbrecht/lightline-bufferline' " Show list of buffers in lightline
Plug 'wincent/terminus'                  " Enhances vim + terminal integration eg cursor shapes etc
Plug 'christoomey/vim-tmux-navigator'    " Same bindings for vim and tmux for splits
Plug 'maximbaz/lightline-ale'            " ALE status for lightline

" MOVEMENT
Plug 'bkad/CamelCaseMotion'
" Plug 'easymotion/vim-easymotion'         " double leader then movement

" GIT
Plug 'tpope/vim-fugitive'                " Git
Plug 'tpope/vim-rhubarb'                 " Github plugin for fugitive
Plug 'jreybert/vimagit'                  " Commit chunks and more

" MARKDOWN ETC
Plug 'vim-pandoc/vim-pandoc'             " Pandoc functionality in Vim and markdown functions
Plug 'vim-pandoc/vim-pandoc-syntax'      " Pandoc markdown highlighting
Plug 'ChesleyTan/wordCount.vim'          " Wordcount displayed in statusbar
Plug 'quentindecock/vim-cucumber-align-pipes' " Markdown tables
"
Plug 'kevinoid/vim-jsonc'

" Themes
" Plug 'altercation/vim-colors-solarized'  " Color-scheme
" Plug 'lifepillar/vim-solarized8'
Plug 'itchyny/landscape.vim'
Plug 'sickill/vim-monokai'

call plug#end()

" Theme settings
set background=dark
colorscheme monokai

set ffs=unix,dos,mac        " Use Unix as the standard file type
set t_Co=256                " enable 256-color mode.
set hidden
set updatetime=300
set shortmess+=c
set signcolumn=yes

syntax enable               " enable syntax highlighting (previously syntax on).

" gVIM
set guioptions=g


" TABS
set tabstop=4               " number of visual spaces per TAB
set softtabstop=4           " number of spaces in tab when editing
set shiftwidth=4
set expandtab               " tabs are spaces

set cindent                 " Automatic program indenting
set cinkeys-=0#             " Comments don't fiddle with indenting
set cino=                   " See :h cinoptions-values
set copyindent              " Make autoindent use the same chars as prev line

" General UI
set number relativenumber   " Show relative number and normal number.
set showcmd                 " show command in bottom bar
set cursorline              " highlight current line
set cursorcolumn            " highlight current column
filetype indent on          " load filetype-specific indent files
set wildmenu                " visual autocomplete for command menu
set lazyredraw              " redraw only when we need to.
set showmatch               " highlight matching [{()}]
set ruler                   " Always show info along bottom.
set wrap                    " Wrap lines
set textwidth=0             " No automatic breaks
set linebreak               " Break long lines by word, not char
set scrolloff=20            " Lines to keep visible below and above
let g:EditorConfig_max_line_indicator = "none"
let &colorcolumn=80

" SEARCH
set incsearch               " search as characters are entered
set hlsearch                " highlight matches
set ignorecase              " Make searches case-insensitive.
" FOLDING
set foldenable                    " enable folding
set foldlevelstart=10             " open most folds by default
set foldnestmax=10                " 10 nested fold max
set foldmethod=indent
let g:markdown_folding=1

" space open/closes folds
nnoremap <space> za

" Leader key
let mapleader = ","
let maplocalleader = ","

" edit vimrc
nmap <leader>vr :vsp ~/.vim/vimrc <CR>

" CLIPBOARD
" https://vi.stackexchange.com/a/16114
let s:clip = '/mnt/c/Windows/System32/clip.exe'
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * call system('echo '.shellescape(join(v:event.regcontents, "\<CR>")).' | '.s:clip)
    augroup END
end

noremap "p :exe 'norm a'.system('/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command Get-Clipboard')<CR>

" SPELLCHECK
set rtp+=/usr/share/vim/vimfiles/
set rtp+=~/.vim/spell/

set spell spl=sv,en " Select language
set nospell " Turn it off at start
nmap <F7> :set spell! <CR>

" No undercurls thanks
hi SpellBad ctermfg=117 ctermbg=203 guifg=#8ac6f2 guibg=#e5786d
hi SpellCap ctermfg=240 ctermbg=180 guifg=#585858 guibg=#cae682
hi SpellRare ctermfg=203 ctermbg=117 guifg=#e5786d guibg=#8ac6f2
hi SpellLocal ctermfg=252 ctermbg=235 guifg=#d0d0d0 guibg=#242424

" MOVEMENT
" move vertically by visual line
nnoremap j gj
nnoremap k gk

" BUFFERS AND FILES

" Open last file edited
nmap <C-e> :e#<CR>

" Move between open buffers.
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" BACKUP off
set nobackup
set nowritebackup
set noswapfile

" Built in fuzzy find from https://github.com/mcantor/no_plugins
set path+=**

" Tweaks for netrw (file-browser) from https://github.com/mcantor/no_plugins
let g:netrw_banner=0        " disable annoying banner
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_winsize = 25

" Enter and backspaces moves through paragraphs in normal mode
nnoremap <BS> {
onoremap <BS> {
vnoremap <BS> {

nnoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
onoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
vnoremap <CR> }

" Splits https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally

" Remaps split movement to CTRL + hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Set tab to 2 spaces for some filetypes
autocmd FileType html setlocal sw=2 sts=2
autocmd FileType js setlocal sw=2 sts=2
autocmd FileType jsx setlocal sw=2 sts=2
autocmd FileType json setlocal sw=2 sts=2
autocmd FileType yaml setlocal sw=2 sts=2
autocmd FileType toml setlocal sw=2 sts=2

" Open splits to the right and below
set splitbelow
set splitright

" Allow saving of files as sudo when I forgot to start vim using sudo.
" https://stackoverflow.com/a/7078429
cmap w!! w !sudo tee > /dev/null %

" PLUGINS
"
" dispatch
autocmd FileType python let b:dispatch = 'pytest -v %'

" CamelCaseMotion
let g:camelcasemotion_key = '<leader>'

" Settings for vim-stay, what to save between sessions
set viewoptions=cursor,slash,unix

" Snippets
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
let g:ultisnips_python_style="numpy"
let g:ultisnips_python_quoting_style="double"
"
" SuperTab
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"

" Pandoc
" make markdown files not appears as pandoc files to w0rp/ale
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
let g:pandoc#folding#fold_yaml=1
let g:pandoc#folding#fdc=0

au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile *.md setlocal formatoptions+=t

" FZF (replaces Ctrl-P, FuzzyFinder and Command-T)
set rtp+=/usr/bin/fzf
set rtp+=~/.fzf
nmap ; :Buffers<CR>
nmap <Leader>t :Tags<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>a :Rg<CR>
nmap <Leader>m :Marks<CR>
nnoremap <C-p> :Files<Cr>

" GutenTags
let g:gutentags_file_list_command = {
   \ 'markers': {
       \ '.git': 'git ls-files',
       \ '.hg': 'hg files',
       \ },
   \ }
" Tagbar
nmap <F6> :TagbarToggle<CR>
let g:tagbar_map_togglefold = "<SPACE>"

" Python
autocmd FileType python setlocal indentkeys-=<:>
autocmd FileType python setlocal indentkeys-=:

" ALE
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['autopep8', 'isort'],
\   'css': ['prettier', 'stylelint'],
\   'html': ['tidy'],
\   'sh': ['shfmt'],
\   'json': ['prettier'],
\}

nmap ]a :ALENextWrap<CR>
nmap [a :ALEPreviousWrap<CR>
nmap ]A :ALELast
nmap [A :ALEFirst
nmap <F8> <Plug>(ale_fix)

let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_autoimport = 1

" Lightline
set noshowmode  " don't show vim mode in cmd line

let g:lightline = {
\   'colorscheme': 'wombat',
\   'active': {
\       'left': [
\           ['mode', 'paste'],
\           ['venv', 'gitbranch', 'filename', 'modified']
\       ],
\       'right': [
\           ['lineinfo'],
\           ['percent'],
\           ['fileformat', 'fileencoding', 'filetype'],
\           ['readonly', 'cocstatus', 'currentfunction'],
\            ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok']
\       ]
\   },
\   'component_function': {
\       'gitbranch': 'fugitive#head',
\       'venv': 'virtualenv#statusline',
\   },
\   'component_type': {
\       'buffers': 'tabsel',
\       'readonly': 'error',
\       'linter_checking': 'right',
\       'linter_infos': 'right',
\       'linter_warnings': 'warning',
\       'linter_errors': 'error',
\       'linter_ok': 'right',
\   },
\   'component_expand': {
\       'linter_checking': 'lightline#ale#checking',
\       'linter_infos': 'lightline#ale#infos',
\       'linter_warnings': 'lightline#ale#warnings',
\       'linter_errors': 'lightline#ale#errors',
\       'linter_ok': 'lightline#ale#ok',
\       'buffers':'lightline#bufferline#buffers'
\   },
\}

let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"

" local vimrc (project specific settings)
set exrc
" Disables unsafe commands in project vimrcs
set secure
